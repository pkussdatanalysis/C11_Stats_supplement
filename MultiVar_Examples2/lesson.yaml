- Class: meta
  Course: Regression_Models
  Lesson: MultiVar_Examples2
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: 这一课，我们将看一些具有多个独立变量的回归模型。我们将从InsectSprays数据开始，我们已经加载。这些数据是R datasets包的一部分。
    它显示了不同的昆虫喷雾剂的有效性。我们向你显示数据的盒形图。

- Class: exact_question
  Output: 该数据集中有多少昆虫喷雾？请直接输入数字
  CorrectAnswer: 6
  AnswerTests: omnitest(correctVal=6)
  Hint: A，B，C，D，E，F字母序列中有多少个字母？

- Class: text_question
  Output: 从箱线图来看，哪个喷雾的中位数最大？请直接输入字母序列号
  CorrectAnswer: B
  AnswerTests: omnitest(correctVal='B')
  Hint: 每个喷雾的中位数由每个盒子的粗横线表示。哪个喷雾的中位数距离0的距离最远？

- Class: cmd_question
  Output: 我们首先尝试更好地理解数据集InsectSprays。使用R函数dim来查找数据的尺寸。
  CorrectAnswer: dim(InsectSprays)
  AnswerTests: omnitest(correctExpr='dim(InsectSprays)')
  Hint: 在R提示符处输入“dim（InsectSprays）”。

- Class: cmd_question
  Output: R函数dim表示InsectSprays是一个72乘2的数组。使用R函数head查看InsectSprays的前15个元素。
  CorrectAnswer: head(InsectSprays,15)
  AnswerTests: omnitest(correctExpr='head(InsectSprays,15)')
  Hint: 在R提示符处输入“head（InsectSpray，15）”。

- Class: cmd_question
  Output: 所以这个数据集包含72个计数，每个与特定的不同喷雾相关联。计数在第一列中，并在第二列中标明喷雾的类型的字母。
    我们创建了6个阵列对应每中喷雾的计数数据。数组的名字是sx，其中x是A，B，C，D，E或F.键入这些数组中的一个名称（your choice）来查看我们正在谈论的内容。
  CorrectAnswer: sA
  AnswerTests: ANY_of_exprs('sA','sB','sC','sD','sE','sF')
  Hint: 在R提示符下输入sB。

- Class: cmd_question
  Output: 在数据集的第二列上运行R命令summary来查看每种喷雾有多少个条目。 （表达式M [，2]产生数组M的第二列）
  CorrectAnswer: summary(InsectSprays[,2])
  AnswerTests: omnitest(correctExpr='summary(InsectSprays[,2])')
  Hint: 在R提示符处输入“summary（InsectSprays [，2]）”。

- Class: text
  Output: 一共有72个计数，对应每种类型有12个计数是不足为奇的。在本课中，我们将考虑多层次因子水平以及我们如何解释
    超过2个因子的线性数据模型。

- Class: cmd_question
  Output: 使用R函数sapply来找出数据列的类
  CorrectAnswer: sapply(InsectSprays,class)
  AnswerTests: omnitest(correctExpr='sapply(InsectSprays,class)')
  Hint: 在R提示符处输入“sapply（InsectSprays，class）”。

- Class: text
  Output: 第二个“喷雾”列的类别是因子。表示特定结果与多个因素之间关系的等式包含二元变量，每个因子一个。
    这个数据有6个因子水平，所以我们需要6个虚拟变量。每个都会指出特定的结果（计数）是否与特定的因素或类别（昆虫喷雾）相关联

- Class: cmd_question
  Output: 使用R的lm函数生成线性模型，其中count是因变量，spray是自变量。回想一下，在R公式中有y~x的形式，其中y取决于预测变量x。
    数据集是InsectSprays。将模型存储在变量fit中。
  CorrectAnswer: fit <- lm(count ~ spray, InsectSprays)
  AnswerTests: creates_lm_model('fit <- lm(count ~ spray, InsectSprays)')
  Hint: 在R提示符处输入“fit <- lm（count~spray，InsectSprays）”。

- Class: cmd_question
  Output: 使用R的summary函数，查看模型的系数。回想一下，这些可以用R构造x$coef来访问。
  CorrectAnswer: summary(fit)$coef
  AnswerTests: omnitest(correctExpr='summary(fit)$coef')
  Hint: 在R提示符处输入“summary（fit）$coef”

- Class: cmd_question
  Output: 注意R返回一个6乘4的数组。为了方便起见，将这个数组的第一列（the Estimate column）存储在一个名为est的变量中。记住访问第一列的R构造是x [，1]。
  CorrectAnswer: est <- summary(fit)$coef[,1]
  AnswerTests: omnitest(correctExpr='est <- summary(fit)$coef[,1]')
  Hint: 在R提示符下输入“est < - summary（fit）$ coef [，1]”。

- Class: text
  Output: 注意sprayA没有明确出现在估计列表中。然而，它出现在了“Estimate”栏中的第一个条目。它被标记为Intercept。
    这是因为sprayA是因子水平的字母顺序列表中的第一个，默认情况下R使用第一个水平作为参考，其他水平或组在其t检验时进行比较（如第三列所示）。

- Class: cmd_question
  Output: 这个模型的Estimate是什么？当然，它们是与喷雾相关的二元或虚拟变量的系数。更重要的是，截距是参照组的平均值，在这里是sprayA，
    其他估计量是其他组的平均值与参考平均值的距离。现在我们来验证这些结论。首先计算sprayA计数的平均值。记住计数全部存储在名为sx的向量中。
    现在我们感兴趣的是找到sA的均值
  CorrectAnswer: mean(sA)
  AnswerTests: omnitest(correctExpr='mean(sA)')
  Hint: 在R提示符处输入“mean（sA）”。

- Class: mult_question
  Output: 你认为sprayB的均值是什么？
  AnswerChoices: 15.3333; 0.83333; -12.41667; I haven't a clue
  CorrectAnswer: 15.3333
  AnswerTests: omnitest(correctVal='15.3333')
  Hint: 将截距的值添加到sprayB的估计值，得出sprayB的经验平均值

- Class: cmd_question
  Output: 现在使用R的mean函数来计算sprayB的平均值。
  CorrectAnswer: mean(sB)
  AnswerTests: omnitest(correctExpr='mean(sB)')
  Hint: 在R提示符处输入“mean（sB）”。

- Class: cmd_question
  Output: 我们生成这个数据的另一个模型，这次省略了intercept(截距)。我们可以很容易地使用R的lm函数来在公式中加上“ - 1”，
    例如count~spray - 1。这就告诉R省略了第一个水平。现在做这个，并将新模型存储在变量nfit中。
  CorrectAnswer: nfit <- lm(count ~ spray - 1, InsectSprays)
  AnswerTests: creates_lm_model('nfit <- lm(count ~ spray - 1, InsectSprays)')
  Hint: 在R提示符处键入“nfit <- lm（count~spray - 1，InsectSprays）”。

- Class: cmd_question
  Output: 现在，像以前一样，看看nfit summary的系数部分。
  CorrectAnswer: summary(nfit)$coef
  AnswerTests: omnitest(correctExpr='summary(nfit)$coef')
  Hint: 在R提示符处输入“summary(nfit)$coef”。

- Class: text
  Output: 注意sprayA现在显示在Estimates列表中。还要注意列的值是如何改变的。所有组的均值现在明确地显示在Estimates估计栏中。请记住，
    以前用截距，sprayA被排除在外，其平均值是截距，而其他喷雾的值（估计值，标准误差和t-检验）都是相对于参照组sprayA而计算的。忽略截距清楚地影响了模型。

- Class: mult_question
  Output: “Estimates”列现在显示什么值？
  AnswerChoices: The means of all 6 levels; The variances of all 6 levels; I have no idea
  CorrectAnswer: The means of all 6 levels
  AnswerTests: omnitest(correctVal='The means of all 6 levels')
  Hint: 数字应该看起来很熟悉，特别是sprayA和sprayB。你为这两种喷雾计算了什么值？
  
- Class: mult_question
  Output: 没有intercept截距（参考组），测试预期计数（组均值）是否不同于零。哪种喷雾具有最不显著的结果？
  AnswerChoices: sprayC; sprayF; sprayB; sprayA
  CorrectAnswer: sprayC
  AnswerTests: omnitest(correctVal='sprayC')
  Hint: 哪种喷雾的概率最高？

- Class: text
  Output: 显然，哪个水平是第一个对模型很重要。如果您想要一个不同的参照组，例如，将sprayB与sprayC进行比较，则可以使用不同的参照组重新组合模型。

- Class: cmd_question
  Output: R 函数relevel重新排序一个因子的水平。我们现在就做。我们会用两个参数来调用。首先是因素，在这种情况下是InsectSprays$spray，
    第二个是我们想要的第一水平，在这种情况下是“C”。将结果存储在一个新的变量spray2中。
  CorrectAnswer: spray2 <- relevel(InsectSprays$spray,"C")
  AnswerTests: omnitest(correctExpr='spray2 <- relevel(InsectSprays$spray,"C")')
  Hint: 在R提示符处输入"spray2 <- relevel(InsectSprays$spray,"C")" 

- Class: cmd_question
  Output: 现在生成一个新的线性模型，并将结果放入变量fit2中。
  CorrectAnswer: fit2 <- lm(count ~ spray2, InsectSprays)
  AnswerTests: creates_lm_model('fit2 <- lm(count ~ spray2, InsectSprays)')
  Hint: 在R提示符处输入fit2 <- lm(count ~ spray2, InsectSprays)

- Class: cmd_question
  Output: 和以前一样，看一下这个新模型fit2的summary部分。 看看sprayC现在是如何截取的（因为它没有明确地出现在列表中）。
  CorrectAnswer: summary(fit2)$coef
  AnswerTests: omnitest(correctExpr='summary(fit2)$coef')
  Hint: 在R提示符处输入“summary（fit2）$ coef”。

- Class: mult_question  
  Output: 像以前一样，看看这个新模型fit2的 summary部分。看看sprayC现在是如何做截距的（因为它没有明确地出现在列表中）。
  AnswerChoices: 2.083333; 12.416667; 14.583333; The model doesn't tell me.
  CorrectAnswer: 2.083333
  AnswerTests: omnitest(correctVal='2.083333')
  Hint: 回想一下，截距是参考组的平均值，在这种情况下为sprayC，因此请查看Estimate列的（截距）行中的值。

- Class: cmd_question
  Output: 使用数组sC作为参数，用R的平均函数mean验证你的答案。
  CorrectAnswer: mean(sC)
  AnswerTests: omnitest(correctExpr='mean(sC)')
  Hint: 在R提示符处输入mean（sC）。


- Class: mult_question  
  Output: 根据这个新模型spray2A的均值是什么？
  AnswerChoices: 14.50000; 12.416667; 14.583333; I don't have a clue
  CorrectAnswer: 14.50000
  AnswerTests: omnitest(correctVal='14.50000')
  Hint: 回想一下，当有一个截距时，一个不是参考的水平的平均值是截距+该水平的系数（或者估计），在这个例子中是spray2a，
    所以你必须把两个数相加。或者，回头看看原始模型的含义。

- Class: text
  Output: 记住，在这个模型中，sprayC是参考组，因此t检验统计（在summary coefficients的第3列中示出）将其他喷雾与喷雾C进行比较。
    这些可以通过手工使用sprayA作为参考的原始模型（拟合）的估计值和标准误差来计算。

- Class: cmd_question
  Output: 从sprayB的系数（fit$coef [2]）中减去拟合的sprayC系数（fit$coef [3]），除以我们看到的标准误差为1.6011。结果是spray2B的t值。现在就做这个。
  CorrectAnswer: (fit$coef[2]-fit$coef[3])/1.6011
  AnswerTests: omnitest(correctExpr='(fit$coef[2]-fit$coef[3])/1.6011')
  Hint: 在R提示符处输入(fit$coef[2]-fit$coef[3])/1.6011”。
  
- Class: mult_question
  Output: 确定将这次练习的结果提交吗?
  CorrectAnswer: NULL
  AnswerChoices: Yes;No
  AnswerTests: post_on_demand()
  Hint: ""
  
- Class: text
  Output: 现在很高兴你已经完成了关于多元线性模型的第二课。
